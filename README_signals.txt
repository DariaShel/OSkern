Формулировка задания:
Реализовать возможность передачи сигналов с данными, реализовать аналоги функций:

int sigqueue(pid, int signo, const union sigval value);

int sigwait(const sigset_t* set, int* sig);

int sigaction(int sig, const struct sigaction* act, struct sigaction* oact);

Что реализовано:

1. Возможность отправки NUM_SIG различных сигналов сигналов между процессами и между процессами.
2. Возможность установки пользовательских обработчиков на эти сигналы или установки режима обработки сигнала по умолчанию
или режима игнорирования сигнала.
3. Добавлена очередь сигналов -- когда процесс не выполняется на процессоре, сигналы не сбрасываются, а добавляются в очередь.
Когда процесс будет снова активен, он будет постепенно их обрабатывать. Если в очереди заполнены все
4. Возможность установки процесса в режим ожидания -- он не начнет выполнять следующую после sigwait инструкцию, пока
в очереди не появится сигнал с необходимым номером. Когда он появится выполнение процесса начнется с его обработки, все
сигналы перед ним будут сброшены.

Структура добавленных изменений:

Необходимые функции sigqueue, sigwait, sigaction реализованы и доступны процессам как функции библиотеки. Описание
библиотеки находится в файле inc/sig.h, а реализация функций располагается в lib/sig.c. Библиотесные функции представляют
собой просто оболочку для одноименных системных вызовов.

Для каждого процесса очередь сигналов, информация о его обработчиках и другие данные про сигналы располагаются в
его структуре Env.

Вызов функции обработчика выполняется при запуске процесса на выполнение планировщиком в функции env_run.

Проверка появления в очереди сигналов, которые ожидает процесс после вызова функции sigwait осуществляется так же
планировщиком во время поиска следующего процесса для выполнения. Если сигнал не появился, то планировщик пропускает
процесс, если сигнал в очереди появился, то планировщик меняет статус процесса и запускает его на выполнение.

Тестирование:

Реализованные возможности тестируются с помощью запуска пользовательских программ из шелла: waiting_test.c
и sig_test.c.

В waiting_test.c есть два процесса: отец и сын. Сын работает некоторое время, а потом вызывает функцию sigwait и
ждет сигнала. Процесс родитель так же ждет некоторое время и отправляет сыну долгожданный им сигнал, дожидается его
и они завершаются.

В sig_test.c также два процесса: отец и сын. Они устанавливают обработчики на сигналы. Потом отец дожидается пока
сын не отправит ему сигнал. После отправки сигнала он отправляет пять сигналов сыну. Сын завершается только после
получения всех пяти сигналов из очереди.